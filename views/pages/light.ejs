<!DOCTYPE html>

<html>
	<head>
		<% include ../partials/head %>
	</head>
    <body class="hold-transition skin-purple sidebar-mini">
        <div class="wrapper">         
			<!-- Main Header -->
			<% include ../partials/header %>
			<% include ../partials/sidebar %>
            <!-- Content Wrapper. Contains page content -->
            <div class="content-wrapper">
                <!-- Content Header (Page header) -->
                <section class="content-header">
                    <h1>Light Configuration</h1>       
                    <ol class="breadcrumb">
                        <li><a href="./light"><i class="fa fa-lightbulb-o"></i> Home</a></li>
                        <li class="active">Light Configuration</li>
                    </ol>
                </section>

                <!-- Main content -->
                <section class="content">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="box">
                                <div class="box-header with-border">
                                    <h3 class="box-title"> Light Configuration </h3>
                                </div><!-- /.box-header -->
                                <div class="box-body table-responsive">
								     <form class="form-inline" id = "form_input" action = "">
                                        <div class = "col-lg-12" id = "form_container">
                                            <table id = "form_table" style="width:50%; min-width: 400px;">
                                                <tr>
                                                    <th style = "text-decoration: underline; padding-bottom: 5px;"> Status </th>
                                                    <th style = "text-decoration: underline; padding-bottom: 5px;"> Color </th>
                                                </tr>
                                            </table>
                                        </div>
                                        <div class = "col-lg-12" style = "margin-top: 5px;">
                                            <input type="button" onclick = "submit_form()" class="btn btn-primary" value = "Save">
                                        </div>
                                    </form>
                                </div><!-- /.box-body -->
                            </div><!-- /.box -->
                        </div>
                    </div>
                </section><!-- /.content -->
            </div><!-- /.content - wrapper -->
			<% include ../partials/footer %>
        </div><!-- ./wrapper -->

		<!-- REQUIRED JS SCRIPTS -->

		<!-- jQuery -->
		<script type="text/javascript" src="./bower_components/AdminLTE/plugins/jQuery/jquery-2.2.3.min.js"></script>
		<!-- Bootstrap 3.3.5 -->
		<script type="text/javascript" src="./bower_components/bootstrap/dist/js/bootstrap.js"></script>
		<!-- moment.js 2.15.1 -->
        <script type="text/javascript" src='./bower_components/moment/moment.js'></script>
		<!-- AdminLTE App -->
		<script type="text/javascript" src="./bower_components/AdminLTE/dist/js/app.min.js"></script>
		<!-- socket.io-client -->
		<script type="text/javascript" src="./socket.io/socket.io.js"></script>
		<script type="text/javascript">

            
            /**
             * disables color from all other statuses' selection lists and reenables old_color. does not disable currently selected color from its correlating status
             * @param {color} is the current color value to disable
             * @param {old_color} the previous color value that needs to be enabled
             * @param {status_name} the name of the status that called this function 
            */
            function disable_colors(color, old_color, status_name)
            {
                var options = document.getElementsByTagName("option");
                for (option in options)
                {
                    if(color != "off")  //can select "off" for mutliple statuses
                    {
                       option_status_id = "option_" + status_name;  //to compare option id with status name, so we don't disable an option that is currently selected
                        if (options[option].value == color && options[option].id != option_status_id) 
                        {
                            options[option].disabled = true;
                            options[option].style.color="#cecece";
                        }
                    }
                    if (options[option].value == old_color)
                    {
                        options[option].disabled = false;
                        options[option].style.color="#515151";
                    }
                }
            }

           /**
             * emits a submit message with the form data to the server 
            */
            function submit_form()
            {
                var inputs = $("#form_input :input"); //all input fields
                var parsed_inputs = new Array(); //only the values of the statuses
                inputs.each(function() {
                    parsed_inputs.push(this.value);
                });
                var socket = io();
                socket.emit("submit", parsed_inputs);
            }

            /**
             * returns string with first letter capitalized
             * @param {string} the string to capitalize
             * @return the new string
            */
            function capitalize_first_letter(string)
            {
                return string.charAt(0).toUpperCase() + string.slice(1);
            }

            /**
             * calculates and returns the html id of the selected color/action in the json file
             * @param {json_data} a json object of the color_config.json file
             * @param {status} the status index to get the correct status info in the json file
             * @return the selected color id in the form "green_solid" or "red_blinking"
            */
            function get_selected_option_id(json_data,status)
            {
                var color = json_data.statuses[status].color;
                var blinking = (json_data.statuses[status].blink) ? "_blinking" : "_solid";
                var selected_option = color + blinking;
                if (color == "off") selected_option = "off"; //to avoid "off_solid" and "off_blinking"
                return selected_option;
            }

            /**
             *reads the data from the json file and creates the html form with the correct statuses and colors 
             *@param {json_data} a json object of the color_config.json file
            */
            function append_html(json_data)
            {
                for (status in json_data.statuses)
                {
                    //append <label> and <select> with unique id - name and id are id from statuses list in json
                    $("#form_table").append(
                        '<tr>' +
                            '<th style=" font-weight: normal">'+
                                '<p style = "margin-right: 10px; " for="' + json_data.statuses[status].id + '">' + capitalize_first_letter(json_data.statuses[status].name) + ':</p>' +
                            '</th>'+
                            '<th style=" font-weight: normal">'+
                                '<select class="form-control"  aria-hidden="true" id="' + json_data.statuses[status].id+ '" name ="'+json_data.statuses[status].id+'" onfocus = "this.old_value" onchange = "disable_colors(this.value,this.old_value,this.id);this.old_value=this.value;">');

                    //append <option> - value is the color and action concatinated: "green_blinking" for example
                    for (color in json_data.colors)
                    {
                        for( action in json_data.actions)
                        {
                            if(json_data.colors[color] == "off") //don't want off-solid and off-blinking
                            {
                                $("#" + json_data.statuses[status].id).append(
                                    '<option value = "'+ json_data.colors[color].toLowerCase() +'">' + capitalize_first_letter(json_data.colors[color]) + '</option>');
                                break;
                            }
                            else
                            {
                                $("#" + json_data.statuses[status].id).append(
                                    '<option value = "'+ json_data.colors[color].toLowerCase() +'_' +json_data.actions[action].toLowerCase() +'" id = "option_'+json_data.statuses[status].id+'">' + capitalize_first_letter(json_data.colors[color]) + ' - ' + json_data.actions[action] + '</option>');
                            }
                        }
                    }
                     //finish appending html
                     $("#form_table").append(
                                '</select">' + 
                            '</th>'+
                        '</tr>');  
                }
            }

			$(document).ready(function () {
				$("#sidebarlight").addClass("active");
				var socket = io();  

                //sets up the html page dynmically via the json file received
				socket.on("html_setup", function(data) {
                    var json_data = JSON.parse(data);
                    append_html(json_data);
                    for(status in json_data.statuses)
                    {
                        //set currently selected color
                        var selected_option = get_selected_option_id(json_data, status);
                        document.getElementById(json_data.statuses[status].id).value = selected_option;
                        document.getElementById(json_data.statuses[status].id).old_value = selected_option; 

                        //disable selected color from other menues
                        disable_colors(selected_option,"",json_data.statuses[status].id); 
                    }

                 }); 
                   
			});
        </script>
    </body>
</html>
